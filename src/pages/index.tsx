import Head from 'next/head'
import { useState, useEffect, useCallback } from 'react'
import toast from 'react-hot-toast'

import { makeStyles } from '@material-ui/core/styles'
import Container from '@material-ui/core/Container'
import Typography from '@material-ui/core/Typography'
import Box from '@material-ui/core/Box'

import FlowService from '@services/api/flow'
import ConversationService from '@services/api/conversation'
import ProgressBar from '@components/ProgressBar'
import Step from '@components/Step'
import Footer from '@components/Footer'

import type { InferGetServerSidePropsType } from 'next'

type TOption = {
  nextId: number
  value: number | string | boolean
  text: string
}

export type TStep = {
  id: number
  name: string
  text: string
  uiType: 'button'
  valueType: 'number' | 'string' | 'boolean'
  valueOptions: TOption[]
}

type TCompletedStep = TStep & { valueChoice: TOption }

const useStyles = makeStyles((theme) => ({
  root: {
    display: 'flex',
    flexDirection: 'column',
    justifyContent: 'center',
    alignItems: 'center',
    minHeight: '100vh',
    paddingTop: theme.spacing(10),
  },
}))

export const getServerSideProps = async () => {
  const response = await FlowService.getData()
  const steps: TStep[] = await response.json()

  return {
    props: { steps },
  }
}

export default function Home({ steps }: InferGetServerSidePropsType<typeof getServerSideProps>) {
  const classes = useStyles()

  const [activeStep, setActiveStep] = useState<TStep>(steps[0])
  const [completedSteps, setCompletedSteps] = useState<TCompletedStep[]>([])
  const [isFinished, setIsFinished] = useState(false)

  const progressBarPercentage = isFinished ? 100 : Math.floor((activeStep.id - 100) / 3)

  const handleNext = (option: TOption) => {
    setCompletedSteps((prevState) => [...prevState, { ...activeStep, valueChoice: option }])

    if (!option.nextId) {
      setIsFinished(true)
      return
    }

    const nextStep = steps.find((step) => step.id === option.nextId)

    if (!nextStep) {
      console.error('Error: missing next step')
      toast.error('Zu dieser Antwort existiert kein weiterer Schritt. Bitte kontaktieren Sie unseren Support.')
      return
    }

    setActiveStep(nextStep)
  }

  const sendAnswers = useCallback(async () => {
    const answers = completedSteps.map((step) => ({ name: step.name, value: step.valueChoice.value }))
    const response = await ConversationService.sendAnswers(answers)

    if (response?.status >= 200 && response?.status <= 299) {
      return
    } else {
      toast.error('Ein Fehler ist aufgetreten. Versuchen Sie es bitte später nochmal.')
    }
  }, [completedSteps])

  useEffect(() => {
    if (isFinished) {
      sendAnswers()
    }
  }, [isFinished, sendAnswers])

  return (
    <>
      <Head>
        <title>Chat Bot</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <ProgressBar percentage={progressBarPercentage} />

      <Container className={classes.root} maxWidth="sm" component="main">
        <Typography variant="h1" component="h1">
          Hallo,
        </Typography>

        <Box mt={4} mb={8}>
          {completedSteps.map((step) => (
            <Step key={step.id} step={step} onButtonClick={handleNext} isCompleted />
          ))}

          {!isFinished && <Step step={activeStep} onButtonClick={handleNext} />}
          {isFinished && <Step step={{ name: 'final', text: 'Herzlichen Dank für Ihre Angaben!' }} isFinal />}
        </Box>

        <Footer />
      </Container>
    </>
  )
}
